
@startuml
abstract class StationController{
     # name : String
     # position : int
     # qtyServices : int
     # time1 : int
     # time2 : int
     # robots[] : Robot

     # StationController (position : int)
     - setData () : void
     + getName () : String
    }

class Station extends StationController implements Runnable{
    + Station (pos : int)
}

class AssemblerModel {
    - lines [] : Line
    - stations [] : Station

    + start () : void


}

class Line {
    - station [] : boolean
    + spot : int

    + go () : void
    + stop () : void
}

@enduml

@startuml
class AssemblerView {
    - AssemblerModel model
    - AssemblerHandler controller

    - doInterface () : void
}

class AssemblerController {
    - AssemblerModel model
    - AssemblerView view

    + AssemblerController(AW,AM)
}

class AssemblerModel {
        - lines [] : Line
        - stations [] : Station

        + start () : void

}

AssemblerView "1" -> AssemblerController : asks
AssemblerController"2" ->  AssemblerModel : request

AssemblerModel "3" .> AssemblerController : response
AssemblerController "4" .> AssemblerView : update



@enduml

@startuml
abstract class StationController extends Canvas {
     # name : String
     # image : String
     # position : int
     # qtyServices : int
     # time1 : int
     # time2 : int
     # robots[] : Robot

     # StationController (position : int)
     - setData () : void
     + getName () : String
    }

class Station extends StationController implements Runnable{

      - plusy : int
      - plusx : int

      + Station (pos : int)
      + paint () : void
      + run () : void
}

class Semaforo{
      - recursos : int

      + Semaforo(recursos : int)
      + espera () : synchronized void
      + libera () : synchronized void

}

class Line {
    - station [] : boolean
    + spot : int

    + getStatus (i : int) : Status

}

class AssemblerView {
    - AssemblerModel model
    - AssemblerHandler controller

    - doInterface () : void
}

class AssemblerController {
    - AssemblerModel model
    - AssemblerView view

    + AssemblerController(AW,AM)
}

class AssemblerModel {
        - stations [] : Station

        + getLines () : int
        + start () : void

}

class Status extends Canvas {
    - url : String

    + Status (url : String)
    + paint (g : Graphics) : void
}


AssemblerView "1" -> AssemblerController : asks
AssemblerController"2" ->  AssemblerModel : request

AssemblerModel "3" .> AssemblerController : response
AssemblerController "4" .> AssemblerView : update



@enduml